### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createOneRound(id: ID!): Round!
  createOneStudent(data: StudentCreateInput!): Student!
  createOneUser(data: UserCreateInput!): User!
  login(name: String!, password: String!): AuthPayload!
}

interface Node {
  """CUID for a resource"""
  id: String!
}

enum OrderByArg {
  asc
  desc
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Query {
  me: User
  node(id: ID!): Node!
  rounds(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): RoundConnection!
  student(where: StudentWhereUniqueInput!): Student
  students(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): StudentConnection!
}

type Round {
  createdBy: User!
  id: String!
  student: Student!
  time: Int!
}

type RoundConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [RoundEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

input RoundCreateManyWithoutCreatedByInput {
  connect: [RoundWhereUniqueInput!]
  create: [RoundCreateWithoutCreatedByInput!]
}

input RoundCreateManyWithoutStudentInput {
  connect: [RoundWhereUniqueInput!]
  create: [RoundCreateWithoutStudentInput!]
}

input RoundCreateWithoutCreatedByInput {
  id: String
  student: StudentCreateOneWithoutRoundsInput!
  time: Int!
}

input RoundCreateWithoutStudentInput {
  createdBy: UserCreateOneWithoutCreatedRoundsInput!
  id: String
  time: Int!
}

type RoundEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Round!
}

input RoundFilter {
  every: RoundWhereInput
  none: RoundWhereInput
  some: RoundWhereInput
}

input RoundOrderByInput {
  createdBy: OrderByArg
  createdById: OrderByArg
  id: OrderByArg
  student: OrderByArg
  studentId: OrderByArg
  time: OrderByArg
}

input RoundWhereInput {
  AND: [RoundWhereInput!]
  createdBy: UserWhereInput
  createdById: StringFilter
  id: StringFilter
  NOT: [RoundWhereInput!]
  OR: [RoundWhereInput!]
  student: StudentWhereInput
  studentId: StringFilter
  time: IntFilter
}

input RoundWhereUniqueInput {
  id: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Student implements Node {
  class: String!
  grade: Int!
  id: String!
  name: String!
  rounds(after: RoundWhereUniqueInput, before: RoundWhereUniqueInput, first: Int, last: Int, orderBy: RoundOrderByInput, skip: Int, where: RoundWhereInput): [Round!]!
  startNumber: Int!
}

type StudentConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [StudentEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

input StudentCreateInput {
  class: String!
  grade: Int!
  id: String
  name: String!
  rounds: RoundCreateManyWithoutStudentInput
  startNumber: Int!
}

input StudentCreateOneWithoutRoundsInput {
  connect: StudentWhereUniqueInput
  create: StudentCreateWithoutRoundsInput
}

input StudentCreateWithoutRoundsInput {
  class: String!
  grade: Int!
  id: String
  name: String!
  startNumber: Int!
}

type StudentEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Student!
}

input StudentWhereInput {
  AND: [StudentWhereInput!]
  class: StringFilter
  grade: IntFilter
  id: StringFilter
  name: StringFilter
  NOT: [StudentWhereInput!]
  OR: [StudentWhereInput!]
  rounds: RoundFilter
  startNumber: IntFilter
}

input StudentWhereUniqueInput {
  id: String
  name: String
  startNumber: Int
}

type Subscription {
  SubscribeRounds: Round!
}

type User {
  createdRounds(after: RoundWhereUniqueInput, before: RoundWhereUniqueInput, first: Int, last: Int, skip: Int): [Round!]!
  id: String!
  name: String!
  password: String!
  role: UserRole!
}

input UserCreateInput {
  createdRounds: RoundCreateManyWithoutCreatedByInput
  id: String
  name: String!
  password: String!
  role: UserRole!
}

input UserCreateOneWithoutCreatedRoundsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCreatedRoundsInput
}

input UserCreateWithoutCreatedRoundsInput {
  id: String
  name: String!
  password: String!
  role: UserRole!
}

"""The users role"""
enum UserRole {
  ADMIN
  TEACHER
  VIEWER
}

input UserWhereInput {
  AND: [UserWhereInput!]
  createdRounds: RoundFilter
  id: StringFilter
  name: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  role: UserRole
}

input UserWhereUniqueInput {
  id: String
  name: String
}
