### This file was generated by Nexus Schema
### Do not make changes to this file directly

type AuthPayload {
  token: String
  user: User
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type Mutation {
  createOneRound(startNumber: Int!): Round
  createOneStudent(data: StudentCreateInput!): Student!
  createOneUser(data: UserCreateInput!): User!
  login(name: String!, password: String!): AuthPayload
}

interface Node {
  """
  CUID for a resource
  """
  id: String!
}

enum OrderByArg {
  asc
  desc
}

type Query {
  me: User
  node(id: ID!): Node
  student(where: StudentWhereUniqueInput!): Student
}

type Round {
  createdBy: User!
  id: String!
  student: Student!
  time: Int!
}

input RoundCreateManyWithoutCreatedByInput {
  connect: [RoundWhereUniqueInput!]
  create: [RoundCreateWithoutCreatedByInput!]
}

input RoundCreateManyWithoutStudentInput {
  connect: [RoundWhereUniqueInput!]
  create: [RoundCreateWithoutStudentInput!]
}

input RoundCreateWithoutCreatedByInput {
  id: String
  student: StudentCreateOneWithoutRoundsInput!
  time: Int!
}

input RoundCreateWithoutStudentInput {
  createdBy: UserCreateOneWithoutCreatedRoundsInput!
  id: String
  time: Int!
}

input RoundFilter {
  every: RoundWhereInput
  none: RoundWhereInput
  some: RoundWhereInput
}

input RoundOrderByInput {
  createdById: OrderByArg
  id: OrderByArg
  studentId: OrderByArg
  time: OrderByArg
}

input RoundWhereInput {
  AND: [RoundWhereInput!]
  createdBy: UserWhereInput
  createdById: StringFilter
  id: StringFilter
  NOT: [RoundWhereInput!]
  OR: [RoundWhereInput!]
  student: StudentWhereInput
  studentId: StringFilter
  time: IntFilter
}

input RoundWhereUniqueInput {
  id: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Student implements Node {
  class: String!
  grade: Int!
  id: String!
  name: String!
  rounds(
    after: RoundWhereUniqueInput
    before: RoundWhereUniqueInput
    first: Int
    last: Int
    orderBy: RoundOrderByInput
    where: RoundWhereInput
  ): [Round!]!
  startNumber: Int!
}

input StudentCreateInput {
  class: String!
  grade: Int!
  id: String
  name: String!
  rounds: RoundCreateManyWithoutStudentInput
  startNumber: Int!
}

input StudentCreateOneWithoutRoundsInput {
  connect: StudentWhereUniqueInput
  create: StudentCreateWithoutRoundsInput
}

input StudentCreateWithoutRoundsInput {
  class: String!
  grade: Int!
  id: String
  name: String!
  startNumber: Int!
}

input StudentWhereInput {
  AND: [StudentWhereInput!]
  class: StringFilter
  grade: IntFilter
  id: StringFilter
  name: StringFilter
  NOT: [StudentWhereInput!]
  OR: [StudentWhereInput!]
  rounds: RoundFilter
  startNumber: IntFilter
}

input StudentWhereUniqueInput {
  id: String
  name: String
  startNumber: Int
}

type Subscription {
  test: Subscription
}

type User {
  id: String!
  name: String!
  password: String!
}

input UserCreateInput {
  createdRounds: RoundCreateManyWithoutCreatedByInput
  id: String
  name: String!
  password: String!
  role: UserRole!
}

input UserCreateOneWithoutCreatedRoundsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCreatedRoundsInput
}

input UserCreateWithoutCreatedRoundsInput {
  id: String
  name: String!
  password: String!
  role: UserRole!
}

"""
The users role
"""
enum UserRole {
  ADMIN
  TEACHER
  VIEWER
}

input UserWhereInput {
  AND: [UserWhereInput!]
  createdRounds: RoundFilter
  id: StringFilter
  name: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  role: UserRole
}

input UserWhereUniqueInput {
  id: String
  name: String
}
