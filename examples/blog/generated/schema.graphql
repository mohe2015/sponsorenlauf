### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createOneRound(studentId: ID!): Round!
  createOneStudent(data: StudentCreateInput!): Student!
  createOneUser(data: UserCreateInput!): User!
  login(name: String!, password: String!): AuthPayload!
}

enum OrderByArg {
  asc
  desc
}

type Query {
  me: User
  rounds(after: ID, before: ID, first: Int, last: Int, orderBy: RoundOrderByInput, skip: Int, where: RoundWhereInput): [Round!]!
  students: [Student!]!
}

type Round {
  createdBy: User!
  id: ID!
  student: Student!
  time: Int!
}

input RoundCreateManyWithoutCreatedRoundsInput {
  connect: [RoundWhereUniqueInput!]
  create: [RoundCreateWithoutCreatedByInput!]
}

input RoundCreateManyWithoutRoundsInput {
  connect: [RoundWhereUniqueInput!]
  create: [RoundCreateWithoutStudentInput!]
}

input RoundCreateWithoutCreatedByInput {
  id: ID
  student: StudentCreateOneWithoutStudentInput!
  time: Int!
}

input RoundCreateWithoutStudentInput {
  createdBy: UserCreateOneWithoutCreatedByInput!
  id: ID
  time: Int!
}

input RoundFilter {
  every: RoundWhereInput
  none: RoundWhereInput
  some: RoundWhereInput
}

input RoundOrderByInput {
  id: OrderByArg
  time: OrderByArg
}

input RoundWhereInput {
  AND: [RoundWhereInput!]
  createdBy: UserWhereInput
  id: StringFilter
  NOT: [RoundWhereInput!]
  OR: [RoundWhereInput!]
  student: StudentWhereInput
  time: IntFilter
}

input RoundWhereUniqueInput {
  id: ID
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Student {
  class: String!
  grade: Int!
  id: ID!
  name: String!
  rounds(after: ID, before: ID, first: Int, last: Int, skip: Int): [Round!]!
  startNumber: Int!
}

input StudentCreateInput {
  class: String!
  grade: Int!
  id: ID
  name: String!
  rounds: RoundCreateManyWithoutRoundsInput
  startNumber: Int!
}

input StudentCreateOneWithoutStudentInput {
  connect: StudentWhereUniqueInput
  create: StudentCreateWithoutRoundsInput
}

input StudentCreateWithoutRoundsInput {
  class: String!
  grade: Int!
  id: ID
  name: String!
  startNumber: Int!
}

input StudentWhereInput {
  AND: [StudentWhereInput!]
  class: StringFilter
  grade: IntFilter
  id: StringFilter
  name: StringFilter
  NOT: [StudentWhereInput!]
  OR: [StudentWhereInput!]
  rounds: RoundFilter
  startNumber: IntFilter
}

input StudentWhereUniqueInput {
  id: ID
  name: String
}

type User {
  createdRounds(after: ID, before: ID, first: Int, last: Int, skip: Int): [Round!]!
  id: ID!
  name: String!
  password: String!
  role: UserRole!
}

input UserCreateInput {
  createdRounds: RoundCreateManyWithoutCreatedRoundsInput
  id: ID
  name: String!
  role: UserRole!
}

input UserCreateOneWithoutCreatedByInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCreatedRoundsInput
}

input UserCreateWithoutCreatedRoundsInput {
  id: ID
  name: String!
  password: String!
  role: UserRole!
}

"""The users role"""
enum UserRole {
  ADMIN
  TEACHER
  VIEWER
}

input UserWhereInput {
  AND: [UserWhereInput!]
  createdRounds: RoundFilter
  id: StringFilter
  name: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  role: UserRole
}

input UserWhereUniqueInput {
  id: ID
  name: String
}
